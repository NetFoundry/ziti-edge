// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package c_a

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostCasIDVerifyHandlerFunc turns a function with the right signature into a post cas ID verify handler
type PostCasIDVerifyHandlerFunc func(PostCasIDVerifyParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCasIDVerifyHandlerFunc) Handle(params PostCasIDVerifyParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostCasIDVerifyHandler interface for that can handle valid post cas ID verify params
type PostCasIDVerifyHandler interface {
	Handle(PostCasIDVerifyParams, interface{}) middleware.Responder
}

// NewPostCasIDVerify creates a new http.Handler for the post cas ID verify operation
func NewPostCasIDVerify(ctx *middleware.Context, handler PostCasIDVerifyHandler) *PostCasIDVerify {
	return &PostCasIDVerify{Context: ctx, Handler: handler}
}

/*PostCasIDVerify swagger:route POST /cas/{id}/verify CA postCasIdVerify

Verify a CA

Allows a CA to become verified by submitting a certificate in PEM format that has been signed by the target CA.
The common name on the certificate must match the verificationToken property of the CA. Unverfieid CAs can not
be used for enrollment/authentication. Requires admin access.


*/
type PostCasIDVerify struct {
	Context *middleware.Context
	Handler PostCasIDVerifyHandler
}

func (o *PostCasIDVerify) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostCasIDVerifyParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
