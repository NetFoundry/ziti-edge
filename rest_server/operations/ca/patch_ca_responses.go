// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package ca

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/netfoundry/ziti-edge/models"
)

// PatchCAOKCode is the HTTP code returned for type PatchCAOK
const PatchCAOKCode int = 200

/*PatchCAOK The patch request was successful and the resource has been altered

swagger:response patchCaOK
*/
type PatchCAOK struct {

	/*
	  In: Body
	*/
	Payload *models.Empty `json:"body,omitempty"`
}

// NewPatchCAOK creates PatchCAOK with default headers values
func NewPatchCAOK() *PatchCAOK {

	return &PatchCAOK{}
}

// WithPayload adds the payload to the patch Ca o k response
func (o *PatchCAOK) WithPayload(payload *models.Empty) *PatchCAOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch Ca o k response
func (o *PatchCAOK) SetPayload(payload *models.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchCAOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchCABadRequestCode is the HTTP code returned for type PatchCABadRequest
const PatchCABadRequestCode int = 400

/*PatchCABadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response patchCaBadRequest
*/
type PatchCABadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchCABadRequest creates PatchCABadRequest with default headers values
func NewPatchCABadRequest() *PatchCABadRequest {

	return &PatchCABadRequest{}
}

// WithPayload adds the payload to the patch Ca bad request response
func (o *PatchCABadRequest) WithPayload(payload *models.APIErrorEnvelope) *PatchCABadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch Ca bad request response
func (o *PatchCABadRequest) SetPayload(payload *models.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchCABadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchCAUnauthorizedCode is the HTTP code returned for type PatchCAUnauthorized
const PatchCAUnauthorizedCode int = 401

/*PatchCAUnauthorized The currently supplied session does not have the correct access rights to request this resource

swagger:response patchCaUnauthorized
*/
type PatchCAUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchCAUnauthorized creates PatchCAUnauthorized with default headers values
func NewPatchCAUnauthorized() *PatchCAUnauthorized {

	return &PatchCAUnauthorized{}
}

// WithPayload adds the payload to the patch Ca unauthorized response
func (o *PatchCAUnauthorized) WithPayload(payload *models.APIErrorEnvelope) *PatchCAUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch Ca unauthorized response
func (o *PatchCAUnauthorized) SetPayload(payload *models.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchCAUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchCANotFoundCode is the HTTP code returned for type PatchCANotFound
const PatchCANotFoundCode int = 404

/*PatchCANotFound The requested resource does not exist

swagger:response patchCaNotFound
*/
type PatchCANotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchCANotFound creates PatchCANotFound with default headers values
func NewPatchCANotFound() *PatchCANotFound {

	return &PatchCANotFound{}
}

// WithPayload adds the payload to the patch Ca not found response
func (o *PatchCANotFound) WithPayload(payload *models.APIErrorEnvelope) *PatchCANotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch Ca not found response
func (o *PatchCANotFound) SetPayload(payload *models.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchCANotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
