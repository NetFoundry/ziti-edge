// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package ca

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/netfoundry/ziti-edge/models"
)

// GetCasIDJwtOKCode is the HTTP code returned for type GetCasIDJwtOK
const GetCasIDJwtOKCode int = 200

/*GetCasIDJwtOK The result is the JWT text to validate the CA

swagger:response getCasIdJwtOK
*/
type GetCasIDJwtOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetCasIDJwtOK creates GetCasIDJwtOK with default headers values
func NewGetCasIDJwtOK() *GetCasIDJwtOK {

	return &GetCasIDJwtOK{}
}

// WithPayload adds the payload to the get cas Id jwt o k response
func (o *GetCasIDJwtOK) WithPayload(payload string) *GetCasIDJwtOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cas Id jwt o k response
func (o *GetCasIDJwtOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCasIDJwtOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetCasIDJwtUnauthorizedCode is the HTTP code returned for type GetCasIDJwtUnauthorized
const GetCasIDJwtUnauthorizedCode int = 401

/*GetCasIDJwtUnauthorized The currently supplied session does not have the correct access rights to request this resource

swagger:response getCasIdJwtUnauthorized
*/
type GetCasIDJwtUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorEnvelope `json:"body,omitempty"`
}

// NewGetCasIDJwtUnauthorized creates GetCasIDJwtUnauthorized with default headers values
func NewGetCasIDJwtUnauthorized() *GetCasIDJwtUnauthorized {

	return &GetCasIDJwtUnauthorized{}
}

// WithPayload adds the payload to the get cas Id jwt unauthorized response
func (o *GetCasIDJwtUnauthorized) WithPayload(payload *models.APIErrorEnvelope) *GetCasIDJwtUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cas Id jwt unauthorized response
func (o *GetCasIDJwtUnauthorized) SetPayload(payload *models.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCasIDJwtUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCasIDJwtNotFoundCode is the HTTP code returned for type GetCasIDJwtNotFound
const GetCasIDJwtNotFoundCode int = 404

/*GetCasIDJwtNotFound The requested resource does not exist

swagger:response getCasIdJwtNotFound
*/
type GetCasIDJwtNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIErrorEnvelope `json:"body,omitempty"`
}

// NewGetCasIDJwtNotFound creates GetCasIDJwtNotFound with default headers values
func NewGetCasIDJwtNotFound() *GetCasIDJwtNotFound {

	return &GetCasIDJwtNotFound{}
}

// WithPayload adds the payload to the get cas Id jwt not found response
func (o *GetCasIDJwtNotFound) WithPayload(payload *models.APIErrorEnvelope) *GetCasIDJwtNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cas Id jwt not found response
func (o *GetCasIDJwtNotFound) SetPayload(payload *models.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCasIDJwtNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
