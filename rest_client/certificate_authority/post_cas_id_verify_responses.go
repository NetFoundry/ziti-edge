// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package certificate_authority

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netfoundry/ziti-edge/rest_model"
)

// PostCasIDVerifyReader is a Reader for the PostCasIDVerify structure.
type PostCasIDVerifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostCasIDVerifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostCasIDVerifyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostCasIDVerifyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostCasIDVerifyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostCasIDVerifyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostCasIDVerifyOK creates a PostCasIDVerifyOK with default headers values
func NewPostCasIDVerifyOK() *PostCasIDVerifyOK {
	return &PostCasIDVerifyOK{}
}

/*PostCasIDVerifyOK handles this case with default header values.

Base empty response
*/
type PostCasIDVerifyOK struct {
	Payload *rest_model.Empty
}

func (o *PostCasIDVerifyOK) Error() string {
	return fmt.Sprintf("[POST /cas/{id}/verify][%d] postCasIdVerifyOK  %+v", 200, o.Payload)
}

func (o *PostCasIDVerifyOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *PostCasIDVerifyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCasIDVerifyBadRequest creates a PostCasIDVerifyBadRequest with default headers values
func NewPostCasIDVerifyBadRequest() *PostCasIDVerifyBadRequest {
	return &PostCasIDVerifyBadRequest{}
}

/*PostCasIDVerifyBadRequest handles this case with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type PostCasIDVerifyBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *PostCasIDVerifyBadRequest) Error() string {
	return fmt.Sprintf("[POST /cas/{id}/verify][%d] postCasIdVerifyBadRequest  %+v", 400, o.Payload)
}

func (o *PostCasIDVerifyBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PostCasIDVerifyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCasIDVerifyUnauthorized creates a PostCasIDVerifyUnauthorized with default headers values
func NewPostCasIDVerifyUnauthorized() *PostCasIDVerifyUnauthorized {
	return &PostCasIDVerifyUnauthorized{}
}

/*PostCasIDVerifyUnauthorized handles this case with default header values.

The currently supplied session does not have the correct access rights to request this resource
*/
type PostCasIDVerifyUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *PostCasIDVerifyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cas/{id}/verify][%d] postCasIdVerifyUnauthorized  %+v", 401, o.Payload)
}

func (o *PostCasIDVerifyUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PostCasIDVerifyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCasIDVerifyNotFound creates a PostCasIDVerifyNotFound with default headers values
func NewPostCasIDVerifyNotFound() *PostCasIDVerifyNotFound {
	return &PostCasIDVerifyNotFound{}
}

/*PostCasIDVerifyNotFound handles this case with default header values.

The requested resource does not exist
*/
type PostCasIDVerifyNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *PostCasIDVerifyNotFound) Error() string {
	return fmt.Sprintf("[POST /cas/{id}/verify][%d] postCasIdVerifyNotFound  %+v", 404, o.Payload)
}

func (o *PostCasIDVerifyNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *PostCasIDVerifyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
