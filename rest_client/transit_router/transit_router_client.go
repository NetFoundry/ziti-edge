// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package transit_router

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transit router API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transit router API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTransitRouter(params *CreateTransitRouterParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTransitRouterCreated, error)

	DeleteTransitRouter(params *DeleteTransitRouterParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTransitRouterOK, error)

	DetailTransitRouter(params *DetailTransitRouterParams, authInfo runtime.ClientAuthInfoWriter) (*DetailTransitRouterOK, error)

	ListTransitRouters(params *ListTransitRoutersParams, authInfo runtime.ClientAuthInfoWriter) (*ListTransitRoutersOK, error)

	PatchTransitRouter(params *PatchTransitRouterParams, authInfo runtime.ClientAuthInfoWriter) (*PatchTransitRouterOK, error)

	UpdateTransitRouter(params *UpdateTransitRouterParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTransitRouterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateTransitRouter creates a transit router resource

  Create a transit router resource. Requires admin access.
*/
func (a *Client) CreateTransitRouter(params *CreateTransitRouterParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTransitRouterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTransitRouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTransitRouter",
		Method:             "POST",
		PathPattern:        "/transit-routers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTransitRouterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTransitRouterCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTransitRouter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTransitRouter deletes a transit router

  Delete a transit router by id. Requires admin access.
*/
func (a *Client) DeleteTransitRouter(params *DeleteTransitRouterParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTransitRouterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTransitRouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTransitRouter",
		Method:             "DELETE",
		PathPattern:        "/transit-routers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTransitRouterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTransitRouterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTransitRouter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DetailTransitRouter retrieves a single transit router

  Retrieves a single transit router by id. Requires admin access.
*/
func (a *Client) DetailTransitRouter(params *DetailTransitRouterParams, authInfo runtime.ClientAuthInfoWriter) (*DetailTransitRouterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetailTransitRouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "detailTransitRouter",
		Method:             "GET",
		PathPattern:        "/transit-routers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DetailTransitRouterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetailTransitRouterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detailTransitRouter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTransitRouters lists transit routers

  Retrieves a list of transit router resources; supports filtering, sorting, and pagination. Requires admin access.

*/
func (a *Client) ListTransitRouters(params *ListTransitRoutersParams, authInfo runtime.ClientAuthInfoWriter) (*ListTransitRoutersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTransitRoutersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTransitRouters",
		Method:             "GET",
		PathPattern:        "/transit-routers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTransitRoutersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTransitRoutersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTransitRouters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchTransitRouter updates the supplied fields on a transit router

  Update the supplied fields on a transit router. Requires admin access.
*/
func (a *Client) PatchTransitRouter(params *PatchTransitRouterParams, authInfo runtime.ClientAuthInfoWriter) (*PatchTransitRouterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTransitRouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchTransitRouter",
		Method:             "PATCH",
		PathPattern:        "/transit-routers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTransitRouterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTransitRouterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchTransitRouter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTransitRouter updates all fields on a transit router

  Update all fields on a transit router by id. Requires admin access.
*/
func (a *Client) UpdateTransitRouter(params *UpdateTransitRouterParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTransitRouterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTransitRouterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTransitRouter",
		Method:             "PUT",
		PathPattern:        "/transit-routers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTransitRouterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTransitRouterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTransitRouter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
