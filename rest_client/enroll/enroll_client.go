// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package enroll

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new enroll API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for enroll API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PostEnrollCa(params *PostEnrollCaParams) (*PostEnrollCaOK, error)

	PostEnrollErott(params *PostEnrollErottParams) (*PostEnrollErottOK, error)

	PostEnrollOtt(params *PostEnrollOttParams) (*PostEnrollOttOK, error)

	PostEnrollOttca(params *PostEnrollOttcaParams) (*PostEnrollOttcaOK, error)

	PostEnrollUpdb(params *PostEnrollUpdbParams) (*PostEnrollUpdbOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PostEnrollCa enrolls an identity with a pre exchanged certificate

  For CA auto enrollment, an identity is not created beforehand.
Instead one will be created during enrollment. The client will present a client certificate that is signed by a
Certificate Authority that has been added and verified (See POST /cas and POST /cas/{id}/verify).

During this process no CSRs are requires as the client should already be in possession of a valid certificate.

*/
func (a *Client) PostEnrollCa(params *PostEnrollCaParams) (*PostEnrollCaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEnrollCaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEnrollCa",
		Method:             "POST",
		PathPattern:        "/enroll/ca",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEnrollCaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEnrollCaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostEnrollCa: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostEnrollErott enrolls an edge router

  Enrolls an edge-router via a one-time-token to establish a certificate based identity.

*/
func (a *Client) PostEnrollErott(params *PostEnrollErottParams) (*PostEnrollErottOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEnrollErottParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEnrollErott",
		Method:             "POST",
		PathPattern:        "/enroll/erott",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEnrollErottReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEnrollErottOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostEnrollErott: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostEnrollOtt enrolls an identity via one time token

  Enroll an identity via a one-time-token which is supplied via a query string parameter. This enrollment method
expects a PEM encoded CSRs to be provided for fulfillment. It is up to the enrolling identity to manage the
private key backing the CSR request.

*/
func (a *Client) PostEnrollOtt(params *PostEnrollOttParams) (*PostEnrollOttOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEnrollOttParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEnrollOtt",
		Method:             "POST",
		PathPattern:        "/enroll/ott",
		ProducesMediaTypes: []string{"application/x-x509-user-cert"},
		ConsumesMediaTypes: []string{"application/pkcs10"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEnrollOttReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEnrollOttOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostEnrollOtt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostEnrollOttca enrolls an identity via one time token with a pre exchanged client certificate

  Enroll an identity via a one-time-token that also requires a pre-exchanged client certificate to match a
Certificate Authority that has been added and verified (See POST /cas and POST /cas{id}/verify). The client
must present a client certificate signed by CA associated with the enrollment. This enrollment is similar to
CA auto enrollment except that is required the identity to be pre-created.

As the client certificat has been pre-exchanged there is no CSR input to this enrollment method.

*/
func (a *Client) PostEnrollOttca(params *PostEnrollOttcaParams) (*PostEnrollOttcaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEnrollOttcaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEnrollOttca",
		Method:             "POST",
		PathPattern:        "/enroll/ottca",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEnrollOttcaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEnrollOttcaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostEnrollOttca: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostEnrollUpdb enrolls an identity vvia one time token

  Enrolls and identity via a one-time-token to establish an initial username and password combination.

*/
func (a *Client) PostEnrollUpdb(params *PostEnrollUpdbParams) (*PostEnrollUpdbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEnrollUpdbParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEnrollUpdb",
		Method:             "POST",
		PathPattern:        "/enroll/updb",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEnrollUpdbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEnrollUpdbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostEnrollUpdb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
