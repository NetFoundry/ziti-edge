// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SessionDetail session detail
//
// swagger:model sessionDetail
type SessionDetail struct {
	BaseEntity

	// api session
	APISession *EntityRef `json:"apiSession,omitempty"`

	// service
	Service *EntityRef `json:"service,omitempty"`

	// session edge routers
	SessionEdgeRouters []*SessionEdgeRouter `json:"sessionEdgeRouters"`

	// type
	Type DialBind `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SessionDetail) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseEntity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseEntity = aO0

	// AO1
	var dataAO1 struct {
		APISession *EntityRef `json:"apiSession,omitempty"`

		Service *EntityRef `json:"service,omitempty"`

		SessionEdgeRouters []*SessionEdgeRouter `json:"sessionEdgeRouters"`

		Type DialBind `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.APISession = dataAO1.APISession

	m.Service = dataAO1.Service

	m.SessionEdgeRouters = dataAO1.SessionEdgeRouters

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SessionDetail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		APISession *EntityRef `json:"apiSession,omitempty"`

		Service *EntityRef `json:"service,omitempty"`

		SessionEdgeRouters []*SessionEdgeRouter `json:"sessionEdgeRouters"`

		Type DialBind `json:"type,omitempty"`
	}

	dataAO1.APISession = m.APISession

	dataAO1.Service = m.Service

	dataAO1.SessionEdgeRouters = m.SessionEdgeRouters

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this session detail
func (m *SessionDetail) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseEntity
	if err := m.BaseEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPISession(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionEdgeRouters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionDetail) validateAPISession(formats strfmt.Registry) error {

	if swag.IsZero(m.APISession) { // not required
		return nil
	}

	if m.APISession != nil {
		if err := m.APISession.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiSession")
			}
			return err
		}
	}

	return nil
}

func (m *SessionDetail) validateService(formats strfmt.Registry) error {

	if swag.IsZero(m.Service) { // not required
		return nil
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *SessionDetail) validateSessionEdgeRouters(formats strfmt.Registry) error {

	if swag.IsZero(m.SessionEdgeRouters) { // not required
		return nil
	}

	for i := 0; i < len(m.SessionEdgeRouters); i++ {
		if swag.IsZero(m.SessionEdgeRouters[i]) { // not required
			continue
		}

		if m.SessionEdgeRouters[i] != nil {
			if err := m.SessionEdgeRouters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sessionEdgeRouters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SessionDetail) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SessionDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionDetail) UnmarshalBinary(b []byte) error {
	var res SessionDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
