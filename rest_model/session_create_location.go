// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SessionCreateLocation session create location
//
// swagger:model sessionCreateLocation
type SessionCreateLocation struct {
	CreateLocation

	// edge routers
	EdgeRouters []*SessionEdgeRouter `json:"edgeRouters"`

	// token
	Token string `json:"token,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SessionCreateLocation) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CreateLocation
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CreateLocation = aO0

	// AO1
	var dataAO1 struct {
		EdgeRouters []*SessionEdgeRouter `json:"edgeRouters"`

		Token string `json:"token,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.EdgeRouters = dataAO1.EdgeRouters

	m.Token = dataAO1.Token

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SessionCreateLocation) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CreateLocation)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		EdgeRouters []*SessionEdgeRouter `json:"edgeRouters"`

		Token string `json:"token,omitempty"`
	}

	dataAO1.EdgeRouters = m.EdgeRouters

	dataAO1.Token = m.Token

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this session create location
func (m *SessionCreateLocation) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CreateLocation
	if err := m.CreateLocation.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeRouters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionCreateLocation) validateEdgeRouters(formats strfmt.Registry) error {

	if swag.IsZero(m.EdgeRouters) { // not required
		return nil
	}

	for i := 0; i < len(m.EdgeRouters); i++ {
		if swag.IsZero(m.EdgeRouters[i]) { // not required
			continue
		}

		if m.EdgeRouters[i] != nil {
			if err := m.EdgeRouters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("edgeRouters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SessionCreateLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionCreateLocation) UnmarshalBinary(b []byte) error {
	var res SessionCreateLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
