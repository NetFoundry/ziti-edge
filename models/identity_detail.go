// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IdentityDetail Detail of a specific identity
//
// swagger:model identityDetail
type IdentityDetail struct {
	BaseEntity

	// authenticators
	Authenticators *IdentityDetailAO1Authenticators `json:"authenticators,omitempty"`

	// enrollment
	Enrollment interface{} `json:"enrollment,omitempty"`

	// is admin
	IsAdmin bool `json:"isAdmin,omitempty"`

	// is default admin
	IsDefaultAdmin bool `json:"isDefaultAdmin,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// type
	Type *EntityRef `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *IdentityDetail) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseEntity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseEntity = aO0

	// AO1
	var dataAO1 struct {
		Authenticators *IdentityDetailAO1Authenticators `json:"authenticators,omitempty"`

		Enrollment interface{} `json:"enrollment,omitempty"`

		IsAdmin bool `json:"isAdmin,omitempty"`

		IsDefaultAdmin bool `json:"isDefaultAdmin,omitempty"`

		Name string `json:"name,omitempty"`

		Type *EntityRef `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Authenticators = dataAO1.Authenticators

	m.Enrollment = dataAO1.Enrollment

	m.IsAdmin = dataAO1.IsAdmin

	m.IsDefaultAdmin = dataAO1.IsDefaultAdmin

	m.Name = dataAO1.Name

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m IdentityDetail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Authenticators *IdentityDetailAO1Authenticators `json:"authenticators,omitempty"`

		Enrollment interface{} `json:"enrollment,omitempty"`

		IsAdmin bool `json:"isAdmin,omitempty"`

		IsDefaultAdmin bool `json:"isDefaultAdmin,omitempty"`

		Name string `json:"name,omitempty"`

		Type *EntityRef `json:"type,omitempty"`
	}

	dataAO1.Authenticators = m.Authenticators

	dataAO1.Enrollment = m.Enrollment

	dataAO1.IsAdmin = m.IsAdmin

	dataAO1.IsDefaultAdmin = m.IsDefaultAdmin

	dataAO1.Name = m.Name

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this identity detail
func (m *IdentityDetail) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseEntity
	if err := m.BaseEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentityDetail) validateAuthenticators(formats strfmt.Registry) error {

	if swag.IsZero(m.Authenticators) { // not required
		return nil
	}

	if m.Authenticators != nil {
		if err := m.Authenticators.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authenticators")
			}
			return err
		}
	}

	return nil
}

func (m *IdentityDetail) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdentityDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentityDetail) UnmarshalBinary(b []byte) error {
	var res IdentityDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IdentityDetailAO1Authenticators identity detail a o1 authenticators
//
// swagger:model IdentityDetailAO1Authenticators
type IdentityDetailAO1Authenticators struct {

	// updb
	Updb *IdentityDetailAO1AuthenticatorsUpdb `json:"updb,omitempty"`
}

// Validate validates this identity detail a o1 authenticators
func (m *IdentityDetailAO1Authenticators) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpdb(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentityDetailAO1Authenticators) validateUpdb(formats strfmt.Registry) error {

	if swag.IsZero(m.Updb) { // not required
		return nil
	}

	if m.Updb != nil {
		if err := m.Updb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authenticators" + "." + "updb")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdentityDetailAO1Authenticators) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentityDetailAO1Authenticators) UnmarshalBinary(b []byte) error {
	var res IdentityDetailAO1Authenticators
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IdentityDetailAO1AuthenticatorsUpdb identity detail a o1 authenticators updb
//
// swagger:model IdentityDetailAO1AuthenticatorsUpdb
type IdentityDetailAO1AuthenticatorsUpdb struct {

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this identity detail a o1 authenticators updb
func (m *IdentityDetailAO1AuthenticatorsUpdb) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IdentityDetailAO1AuthenticatorsUpdb) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentityDetailAO1AuthenticatorsUpdb) UnmarshalBinary(b []byte) error {
	var res IdentityDetailAO1AuthenticatorsUpdb
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
